generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model branches {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  address    String?   @db.Text
  latitude   Float?    @db.Float
  longitude  Float?    @db.Float
  services   String?   @db.Text
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model memberships {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(100)
  description String?  @db.Text
  duration    String?  @db.VarChar(50) // Ej: '1 mes'
  price       Float?   @db.Float
  status      Boolean? @default(true)

  subscriptions subscriptions[]

  users users[] @relation("UserMemberships")
}

model subscriptions {
  id            Int               @id @default(autoincrement())
  user_id       Int
  membership_id Int
  proof_file    String            @db.LongText // URL o base64 del comprobante
  state         SubscriptionState @default(pendiente)
  start_date    DateTime
  end_date      DateTime

  user       users       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  membership memberships @relation(fields: [membership_id], references: [id], onDelete: Cascade)
}

enum SubscriptionState {
  pendiente
  aprobado
  rechazado
}

enum MembershipState {
  activo
  inactivo
  pendiente
}

model qrs {
  id           Int       @id @default(autoincrement())
  image        String?   @db.LongText
  generated_at DateTime? @db.Date
  description  String?   @db.Text
}

model reports {
  id           Int       @id @default(autoincrement())
  type         String?   @db.VarChar(50)
  generated_at DateTime? @db.Date
}

model rfid_access {
  id         Int       @id @default(autoincrement())
  rfid_code  String    @unique(map: "rfid_code") @db.VarChar(100)
  entry_date DateTime? @db.Date
  exit_date  DateTime? @db.Date
  user_id    Int?
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rfid_access_ibfk_1")

  @@index([user_id], map: "user_id")
}

model users {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar(100)
  lastname   String     @db.VarChar(100)
  email      String     @unique(map: "email") @db.VarChar(150)
  password   String     @db.VarChar(255)
  role       users_role
  status     Boolean?   @default(true)
  created_at DateTime?  @default(now()) @db.Timestamp(0)
  updated_at DateTime?  @default(now()) @db.Timestamp(0)

  memberships   memberships[]   @relation("UserMemberships", map: "fk_user_memberships")
  rfid_access   rfid_access[]
  client        clients?        @relation("UserClient")
  subscriptions subscriptions[]
}

enum users_role {
  admin
  empleado
  cliente
}

model clients {
  id        Int       @id @default(autoincrement())
  user_id   Int       @unique
  ci        String
  birthdate DateTime?

  user users @relation("UserClient", fields: [user_id], references: [id], onDelete: Cascade)
}
