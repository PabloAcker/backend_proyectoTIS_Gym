generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model branches {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  address     String?   @db.Text
  coordinates Json?
  services    String?   @db.Text
  image       String?   @db.LongText // ← Nuevo campo para imagen
  created_at  DateTime? @default(now()) @db.Timestamp(0)
}

model memberships {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String?         @db.Text
  duration      String?         @db.VarChar(50)
  price         Float?          @db.Float
  status        Boolean?        @default(true)
  subscriptions subscriptions[]
}

model subscriptions {
  id            Int                @id @default(autoincrement())
  user_id       Int
  membership_id Int
  proof_file    String?            @db.LongText
  state         SubscriptionState? @default(pendiente)
  start_date    DateTime           @db.Date
  end_date      DateTime           @db.Date

  user        users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_ibfk_1")
  membership  memberships   @relation(fields: [membership_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "subscriptions_ibfk_2")
  rfid_access rfid_access[]
  rfid_logs   rfid_logs[] // ← Nuevo

  @@index([membership_id], map: "membership_id")
  @@index([user_id], map: "user_id")
}

model qrs {
  id           Int       @id @default(autoincrement())
  image        String?   @db.LongText
  generated_at DateTime? @db.Date
  description  String?   @db.Text
}

model reports {
  id           Int       @id @default(autoincrement())
  type         String?   @db.VarChar(50)
  generated_at DateTime? @db.Date
}

model rfid_access {
  id              Int           @id @default(autoincrement())
  rfid_code       String        @unique @db.VarChar(100)
  subscription_id Int
  subscription    subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  rfid_logs rfid_logs[] // ← Relación con logs

  @@index([subscription_id])
}

model rfid_logs {
  id              Int       @id @default(autoincrement())
  rfid_access_id  Int
  subscription_id Int
  entry_date      DateTime? @db.DateTime(0)
  exit_date       DateTime? @db.DateTime(0)

  rfid_access  rfid_access   @relation(fields: [rfid_access_id], references: [id], onDelete: Cascade)
  subscription subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@index([rfid_access_id])
  @@index([subscription_id])
}

model users {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(100)
  lastname        String     @db.VarChar(100)
  email           String     @unique(map: "email") @db.VarChar(150)
  password        String     @db.VarChar(255)
  role            users_role
  status          Boolean?   @default(true)
  created_at      DateTime?  @default(now()) @db.Timestamp(0)
  updated_at      DateTime?  @default(now()) @db.Timestamp(0)
  name_updated_at DateTime?  @db.DateTime(0)

  client        clients?        @relation("UserClient")
  subscriptions subscriptions[]
}

model clients {
  id        Int       @id @default(autoincrement())
  user_id   Int?      @unique(map: "user_id")
  ci        String    @db.VarChar(20)
  birthdate DateTime? @db.Date

  user users? @relation("UserClient", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clients_ibfk_1")
}

enum SubscriptionState {
  pendiente
  aprobado
  rechazado
  vencido
}

enum users_role {
  admin
  empleado
  cliente
}
